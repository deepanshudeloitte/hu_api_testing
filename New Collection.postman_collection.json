{
	"info": {
		"_postman_id": "631558d7-5bd5-4496-8885-b8df11c6e3c6",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "New Request",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://reqres.in/api/users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"[7:05 PM] Dadheech, Mahesh\r",
							"pm.test(\"Response time is less than 400ms\", function () {    pm.expect(pm.response.responseTime).to.be.below(400);});pm.test(\"Verify content type\", function(){    pm.response.to.be.header(\"Content-Type\",\"application/json; charset=utf-8\");});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    ”name”: ”Amit”,\r\n    ”job”: ”Manager”\r\n}\r\n\r\n"
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://reqres.in/api/users/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Verify content type\", function(){\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    pm.response.to.be.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\t\r\n\"name\": \"Arun\",\r\n   \"job\": \"Manager\",\r\n   \"updatedAt\": \"2021-06-11T07:07:25.866Z\"\r\n}\r\n"
				},
				"url": {
					"raw": "https://reqres.in/api/users/",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://jsonplaceholder.typicode.com/posts/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Verify content type\", function(){\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    pm.response.to.be.header(\"Content-Type\",\"application/json; charset=utf-8\");\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Verify User with 'id' 40 has 'userId'=4 \", function(){\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    let userId = responseData[39].userId;\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"   pm.expect(userId).to.eql(4);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Verify Every user contains 'title' and its type is String\",function(){\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    let isString = true;\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    for(let i=0;i<a.length;i++){\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"        if(typeof(a[i].title) != \"string\" ){\r",
							"\r",
							"\r",
							"\r",
							"            isString=false\r",
							"\r",
							"\r",
							"\r",
							"            break;\r",
							"\r",
							"\r",
							"\r",
							"        }\r",
							"\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"   pm.expect(isString).to.eql(true);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		}
	]
}